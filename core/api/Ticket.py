from core.api.Task import TicketTask

class Ticket:

    def __init__(self):
        self.task = TicketTask
        self.ticket_body()

    def ticket_body(self):
        self.id = 3741 # ID заявки
        self.entities_id = 0 # Номер организации к которой отновится заявка
        self.name = 'Заголовок' # Заголовок заявки
        self.date = '2025-01-23 15:15:55' # Дата заведения заявки
        self.closedate = None # Дата закрытия заявки
        self.solvedate = None # Дата решения заявки
        self.takeintoaccountdate = '2025-01-28 10:09:30' # Дата и время, когда заявка была принята к рассмотрению (взята в работу) техническим специалистом или командой
        self.date_mod = '2025-01-28 10:09:30' # Дата и время последнего изменения заявки
        self.users_id_lastupdater = 38 # ID пользователя, который последний изменил заявку

        self.status = 1 # Статус заявки
        self.users_id_recipient = 39 # Идентификатор пользователя (или группы пользователей) GLPI, которому назначена эта заявка на выполнение

        self.requesttypes_id = 1 # ID типа запроса
        self.content = '&#60;p&#62;dchgsfdhgdf&#60;/p&#62;' # Текст заявки
        self.urgency = 5 # Срочность заявки
        self.impact = 3 # Влияние заявки
        self.priority = 4 # Приоритет заявки
        self.itilcategories_id = 1 # ITIL категория

        self.type = 2 # Тип заявки (Запрос или инцидент)
        self.global_validation = 1 # Какая-то душная валидация
        self.slas_id_ttr = 2 # SLA_TTR

        self.slas_id_tto = 0 # SLA_TTO
        self.slalevels_id_ttr = 1 # Идентификатор уровня SLA (соглашения об уровне обслуживания), который применяется к заявке для расчета TTR (времени до решения проблемы)
        self.time_to_resolve = '2025-01-24 14:15:55' # Время для решения заявки по SLA
        self.time_to_own = None # Максимальное время (в секундах), в течение которого заявка должна быть принята в работу (рассмотрена) в соответствии с назначенным SLA
        self.begin_waiting_date = None # Дата и время, когда заявка была поставлена в состояние ожидания (например, когда требуется ответ от пользователя)
        self.sla_waiting_duration = 0 # Суммарное время (в секундах), в течение которого заявка находилась в состоянии ожидания в рамках SLA. Обычно исключается из времени, затраченного на решение.
        self.ola_waiting_duration = 0 # Суммарное время (в секундах), в течение которого заявка находилась в состоянии ожидания в рамках OLA. Обычно исключается из времени, затраченного на решение.
        self.olas_id_tto = 1 # OLA_TTO
        self.olas_id_ttr = 0 # OLA_TTR
        self.olalevels_id_ttr = 0 # Идентификатор уровня OLA (соглашения об уровне обслуживания), который применяется к заявке для расчета внутреннего времени до решения (TTR)
        self.ola_tto_begin_date = '2025-01-23 15:15:55' # Время добавление OLA_TTO
        self.ola_ttr_begin_date = None # Время добавление OLA_TTR
        self.internal_time_to_resolve = None # Максимальное время (в секундах), в течение которого заявка должна быть обработана внутренними ресурсами в соответствии с назначенным OLA
        self.internal_time_to_own = '2025-01-23 15:20:55' # Максимальное время (в секундах), в течение которого заявка должна быть принята в работу внутренними ресурсами в соответствии с назначенным OLA
        self.waiting_duration = 0 # Суммарное время (в секундах), в течение которого заявка находилась в состоянии ожидания (независимо от того, связано ли это с SLA или OLA)
        self.close_delay_stat = 0 # Задержка в секундах между фактической датой закрытия заявки и ожидаемой датой закрытия, рассчитанной на основе SLA или OLA
        self.solve_delay_stat = 0 # Задержка в секундах между фактической датой решения (например, когда проблема была устранена) и ожидаемой датой решения, рассчитанной на основе SLA или OLA
        self.takeintoaccount_delay_stat = 78815
        self.actiontime = 0 # Общее время (в секундах), затраченное на выполнение каких-либо действий, связанных с заявкой (например, работа специалиста над заявкой)
        self.is_deleted = 0 # Логический флаг, указывающий, удалена ли заявка
        self.locations_id = 0 # Идентификатор местоположения (location), связанного с заявкой
        self.validation_percent = 0 # Идентификатор местоположения (location), связанного с заявкой
        self.date_creation = '2025-01-23 15:15:55' # Дата и время создания заявки
        pass

    def ticketUPD_status(self,status:int):
        """
        Принимает значение int
        1 - Новая
        2 - В работе назначена
        3 - В работе (запланирована)
        4 - в Ожидании (В разработке)
        5 - Решена
        6 - Закрыто
        """